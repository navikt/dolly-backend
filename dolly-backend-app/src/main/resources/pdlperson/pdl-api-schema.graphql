# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type AdresseNode {
    adressegradering: String
    coAdressenavn: String
}

type Adressebeskyttelse {
    folkeregistermetadata: Folkeregistermetadata
    gradering: AdressebeskyttelseGradering!
    metadata: Metadata!
}

type Bostedsadresse {
    angittFlyttedato: Date
    coAdressenavn: String
    folkeregistermetadata: Folkeregistermetadata
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime
    matrikkeladresse: Matrikkeladresse
    metadata: Metadata!
    ukjentBosted: UkjentBosted
    utenlandskAdresse: UtenlandskAdresse
    vegadresse: Vegadresse
}

type DeltBosted {
    adresseNode: AdresseNode!
    coAdressenavn: String
    folkeregistermetadata: Folkeregistermetadata!
    matrikkeladresse: Matrikkeladresse
    metadata: Metadata!
    sluttdatoForKontrakt: Date @deprecated(reason : "Flyttet til adresser rett under")
    startdatoForKontrakt: Date!
    ukjentBosted: UkjentBosted
    utenlandskAdresse: UtenlandskAdresse
    vegadresse: Vegadresse
}

type DoedfoedtBarn {
    dato: Date
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
}

type Doedsfall {
    doedsdato: Date
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

" Endring som har blitt utfÃ¸rt pÃ¥ opplysningen. F.eks: Opprett -> Korriger -> Korriger"
type Endring {
    """

    Opphavet til informasjonen. I NAV blir dette satt i forbindelse med registrering (f.eks: Sykehuskassan).
    Fra Folkeregisteret fÃ¥r vi opphaven til dems opplysning, altsÃ¥ NAV, UDI, Politiet, Skatteetaten o.l.. Fra Folkeregisteret kan det ogsÃ¥ vÃ¦re tekniske navn som: DSF_MIGRERING, m.m..
    """
    kilde: String!
    " Tidspunktet for registrering."
    registrert: DateTime!
    " Hvem endringen har blitt utfÃ¸rt av, ofte saksbehandler (f.eks Z990200), men kan ogsÃ¥ vÃ¦re system (f.eks srvXXXX). Denne blir satt til \"Folkeregisteret\" for det vi fÃ¥r fra dem."
    registrertAv: String!
    " Hvilke system endringen har kommet fra (f.eks srvXXX). Denne blir satt til \"FREG\" for det vi fÃ¥r fra Folkeregisteret."
    systemkilde: String!
    " Hvilke type endring som har blitt utfÃ¸rt."
    type: Endringstype!
}

type FalskIdentitet {
    erFalsk: Boolean!
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
    rettIdentitetErUkjent: Boolean
    rettIdentitetVedIdentifikasjonsnummer: String
    rettIdentitetVedOpplysninger: FalskIdentitetIdentifiserendeInformasjon
}

type FalskIdentitetIdentifiserendeInformasjon {
    foedselsdato: Date
    kjoenn: KjoennType
    personnavn: Personnavn!
    statsborgerskap: [String!]!
}

type Familierelasjon {
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
    minRolleForPerson: Familierelasjonsrolle
    relatertPersonsIdent: String!
    relatertPersonsRolle: Familierelasjonsrolle!
}

type Foedsel {
    foedekommune: String
    foedeland: String
    foedested: String
    foedselsaar: Int
    foedselsdato: Date
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Folkeregisteridentifikator {
    folkeregistermetadata: Folkeregistermetadata!
    identifikasjonsnummer: String!
    metadata: Metadata!
    status: String!
    type: String!
}

type Folkeregistermetadata {
    aarsak: String
    ajourholdstidspunkt: DateTime
    gyldighetstidspunkt: DateTime
    kilde: String
    opphoerstidspunkt: DateTime
    sekvens: Int
}

type Folkeregisterpersonstatus {
    folkeregistermetadata: Folkeregistermetadata!
    forenkletStatus: String!
    metadata: Metadata!
    status: String!
}

type ForelderBarnRelasjon {
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
    minRolleForPerson: Familierelasjonsrolle
    relatertPersonsIdent: String!
    relatertPersonsRolle: Familierelasjonsrolle!
}

type Foreldreansvar {
    ansvar: String
    ansvarlig: String
    ansvarligUtenIdentifikator: RelatertBiPerson
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
}

type Fullmakt {
    gyldigFraOgMed: Date!
    gyldigTilOgMed: Date!
    metadata: Metadata!
    motpartsPersonident: String!
    motpartsRolle: FullmaktsRolle!
    omraader: [String!]!
}

type GeografiskTilknytning {
    gtBydel: String
    gtKommune: String
    gtLand: String
    gtType: GtType!
    regel: String!
}

type HentIdenterBolkResult {
    code: String!
    ident: String!
    identer: [IdentInformasjon!]
}

type HentPersonBolkResult {
    code: String!
    ident: String!
    person: Person
}

type IdentInformasjon {
    gruppe: IdentGruppe!
    historisk: Boolean!
    ident: String!
}

type Identitetsgrunnlag {
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
    status: Identitetsgrunnlagsstatus!
}

type Identliste {
    identer: [IdentInformasjon!]!
}

type InnflyttingTilNorge {
    folkeregistermetadata: Folkeregistermetadata
    fraflyttingsland: String
    fraflyttingsstedIUtlandet: String
    metadata: Metadata!
}

type Kjoenn {
    folkeregistermetadata: Folkeregistermetadata
    kjoenn: KjoennType
    metadata: Metadata!
}

type Kontaktadresse {
    coAdressenavn: String
    folkeregistermetadata: Folkeregistermetadata
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime
    metadata: Metadata!
    postadresseIFrittFormat: PostadresseIFrittFormat
    postboksadresse: Postboksadresse
    type: KontaktadresseType!
    utenlandskAdresse: UtenlandskAdresse
    utenlandskAdresseIFrittFormat: UtenlandskAdresseIFrittFormat
    vegadresse: Vegadresse
}

type KontaktinformasjonForDoedsbo {
    adresse: KontaktinformasjonForDoedsboAdresse!
    advokatSomKontakt: KontaktinformasjonForDoedsboAdvokatSomKontakt
    attestutstedelsesdato: Date!
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
    organisasjonSomKontakt: KontaktinformasjonForDoedsboOrganisasjonSomKontakt
    personSomKontakt: KontaktinformasjonForDoedsboPersonSomKontakt
    skifteform: KontaktinformasjonForDoedsboSkifteform!
}

type KontaktinformasjonForDoedsboAdresse {
    adresselinje1: String!
    adresselinje2: String
    landkode: String
    postnummer: String!
    poststedsnavn: String!
}

type KontaktinformasjonForDoedsboAdvokatSomKontakt {
    organisasjonsnavn: String
    organisasjonsnummer: String
    personnavn: Personnavn!
}

type KontaktinformasjonForDoedsboOrganisasjonSomKontakt {
    kontaktperson: Personnavn
    organisasjonsnavn: String!
    organisasjonsnummer: String
}

type KontaktinformasjonForDoedsboPersonSomKontakt {
    foedselsdato: Date
    identifikasjonsnummer: String
    personnavn: Personnavn
}

type Koordinater {
    kvalitet: Int
    x: Float
    y: Float
    z: Float
}

type Matrikkeladresse {
    bruksenhetsnummer: String
    kommunenummer: String
    koordinater: Koordinater
    matrikkelId: Long
    postnummer: String
    tilleggsnavn: String
}

type Metadata {
    """

    En liste over alle endringer som har blitt utfÃ¸rt over tid.
    VÃ¦r obs pÃ¥ at denne kan endre seg og man burde takle at det finnes flere korrigeringer i listen, sÃ¥ dersom man Ã¸nsker Ã¥ kun vise den siste, sÃ¥ mÃ¥ man selv filtrere ut dette.
    Det kan ogsÃ¥ ved svÃ¦rt fÃ¥ tilfeller skje at opprett blir fjernet. F.eks ved splitt tilfeller av identer. Dette skal skje i svÃ¦rt fÃ¥ tilfeller. Dersom man Ã¸nsker Ã¥ presentere opprettet tidspunktet, sÃ¥ blir det tidspunktet pÃ¥ den fÃ¸rste endringen.
    """
    endringer: [Endring!]!
    """

    Feltet betegner hvorvidt dette er en funksjonelt historisk opplysning, for eksempel en tidligere fraflyttet adresse eller et foreldreansvar som er utlÃ¸pt fordi barnet har fylt 18 Ã¥r.
    I de fleste tilfeller kan dette utledes ved Ã¥ se pÃ¥ de andre feltene i opplysningen. Dette er imidlertid ikke alltid tilfellet, blant annet for foreldreansvar.
    Feltet bÃ¸r brukes av konsumenter som henter informasjon fra GraphQL med historikk, men som ogsÃ¥ trenger Ã¥ utlede gjeldende informasjon.
    """
    historisk: Boolean!
    " Master refererer til hvem som eier opplysningen, f.eks sÃ¥ har PDL en kopi av Folkeregisteret, da vil master vÃ¦re FREG og eventuelle endringer pÃ¥ dette mÃ¥ gÃ¥ via Folkeregisteret (API mot dem eller andre rutiner)."
    master: String!
    """

    I PDL sÃ¥ fÃ¥r alle forekomster av en opplysning en ID som representerer dens unike forekomst.
    F.eks, sÃ¥ vil en Opprett ha ID X, korriger ID Y (der hvor den spesifiserer at den korrigerer X).
    Dersom en opplysning ikke er lagret i PDL, sÃ¥ vil denne verdien ikke vÃ¦re utfylt.
    """
    opplysningsId: String
}

type Navn {
    etternavn: String!
    folkeregistermetadata: Folkeregistermetadata
    forkortetNavn: String
    fornavn: String!
    gyldigFraOgMed: Date
    mellomnavn: String
    metadata: Metadata!
    originaltNavn: OriginaltNavn
}

type Opphold {
    folkeregistermetadata: Folkeregistermetadata!
    metadata: Metadata!
    oppholdFra: Date
    oppholdTil: Date
    type: Oppholdstillatelse!
}

type Oppholdsadresse {
    coAdressenavn: String
    folkeregistermetadata: Folkeregistermetadata
    gyldigFraOgMed: DateTime
    gyldigTilOgMed: DateTime
    matrikkeladresse: Matrikkeladresse
    metadata: Metadata!
    oppholdAnnetSted: String
    oppholdsadressedato: Date @deprecated(reason : "Mappes til gyldigFraOgMed. Dette feltet er nÃ¥ overflÃ¸dig vil bli fjernet")
    utenlandskAdresse: UtenlandskAdresse
    vegadresse: Vegadresse
}

type OriginaltNavn {
    etternavn: String
    fornavn: String
    mellomnavn: String
}

type Person {
    adressebeskyttelse(historikk: Boolean = false): [Adressebeskyttelse!]!
    bostedsadresse(historikk: Boolean = false): [Bostedsadresse!]!
    deltBosted(historikk: Boolean = false): [DeltBosted!]!
    doedfoedtBarn: [DoedfoedtBarn!]!
    doedsfall: [Doedsfall!]!
    falskIdentitet: FalskIdentitet
    familierelasjoner: [Familierelasjon!]!
    foedsel: [Foedsel!]!
    folkeregisteridentifikator(historikk: Boolean = false): [Folkeregisteridentifikator!]!
    folkeregisterpersonstatus(historikk: Boolean = false): [Folkeregisterpersonstatus!]!
    forelderBarnRelasjon: [ForelderBarnRelasjon!]!
    foreldreansvar(historikk: Boolean = false): [Foreldreansvar!]!
    fullmakt(historikk: Boolean = false): [Fullmakt!]!
    identitetsgrunnlag(historikk: Boolean = false): [Identitetsgrunnlag!]!
    innflyttingTilNorge: [InnflyttingTilNorge!]!
    kjoenn(historikk: Boolean = false): [Kjoenn!]!
    kontaktadresse(historikk: Boolean = false): [Kontaktadresse!]!
    kontaktinformasjonForDoedsbo(historikk: Boolean = false): [KontaktinformasjonForDoedsbo!]!
    navn(historikk: Boolean = false): [Navn!]!
    opphold(historikk: Boolean = false): [Opphold!]!
    oppholdsadresse(historikk: Boolean = false): [Oppholdsadresse!]!
    sikkerhetstiltak: [Sikkerhetstiltak!]!
    sivilstand(historikk: Boolean = false): [Sivilstand!]!
    statsborgerskap(historikk: Boolean = false): [Statsborgerskap!]!
    telefonnummer: [Telefonnummer!]!
    tilrettelagtKommunikasjon: [TilrettelagtKommunikasjon!]!
    utenlandskIdentifikasjonsnummer(historikk: Boolean = false): [UtenlandskIdentifikasjonsnummer!]!
    utflyttingFraNorge: [UtflyttingFraNorge!]!
    vergemaalEllerFremtidsfullmakt(historikk: Boolean = false): [VergemaalEllerFremtidsfullmakt!]!
}

type Personnavn {
    etternavn: String!
    fornavn: String!
    mellomnavn: String
}

type PostadresseIFrittFormat {
    adresselinje1: String
    adresselinje2: String
    adresselinje3: String
    postnummer: String
}

type Postboksadresse {
    postboks: String!
    postbokseier: String
    postnummer: String
}

type Query {
    hentGeografiskTilknytning(ident: ID!): GeografiskTilknytning
    hentIdenter(grupper: [IdentGruppe!], historikk: Boolean = false, ident: ID!): Identliste
    hentIdenterBolk(grupper: [IdentGruppe!], historikk: Boolean = false, identer: [ID!]!): [HentIdenterBolkResult!]!
    hentPerson(ident: ID!): Person
    hentPersonBolk(identer: [ID!]!): [HentPersonBolkResult!]!
    sokPerson(criteria: [Criterion], paging: Paging): SearchResult
}

type RelatertBiPerson {
    foedselsdato: Date
    kjoenn: KjoennType
    navn: Personnavn
    statsborgerskap: String
}

type SearchHighlight {
    " Forteller hvorvidt opplysningen som ga treff er markert som historisk."
    historisk: Boolean
    """

    liste med feltene og verdiene som ga treff.
    Merk at for fritekst sÃ¸k sÃ¥ vil disse kunne referere til hjelpe felter som ikke er synelig i resultatene.
    """
    matches: [SearchMatch]
    """

    Navn/Sti til opplysningen som ga treff. Merk at dette ikke er feltet som ga treff men opplysningen.
    F.eks. hvis du sÃ¸ker pÃ¥ person.navn.fornavn sÃ¥ vil opplysingen vÃ¦re person.navn.
    """
    opplysning: String
    """

    Gitt att opplysningen som ga treff har en opplysningsId sÃ¥ vil den returneres her.
    alle sÃ¸k under person skal ha opplysningsId, men sÃ¸k i identer vil kunne returnere treff uten opplysningsId.
    """
    opplysningsId: String
}

type SearchHit {
    " Infromasjon om hva som ga treff i sÃ¸ke resultatet."
    highlights: [SearchHighlight]
    " forespurte data"
    identer(historikk: Boolean = false): [IdentInformasjon!]!
    " forespurte data"
    person: Person
    " Poengsummen elasticsearch  har gitt dette resultatet (brukt til feilsÃ¸king, og tuning av sÃ¸k)"
    score: Float
}

type SearchMatch {
    " feltnavn med sti til feltet so ga treff."
    field: String!
    " Verdien som ga treff"
    fragments: [String]
    type: String
}

type SearchResult {
    " treff liste"
    hits: [SearchHit!]!
    " Side nummer for siden som vises"
    pageNumber: Int
    " Totalt antall treff (Ã¸vre grense er satt til 10 000)"
    totalHits: Int
    " Totalt antall sider"
    totalPages: Int
}

type Sikkerhetstiltak {
    beskrivelse: String!
    gyldigFraOgMed: Date!
    gyldigTilOgMed: Date!
    kontaktperson: SikkerhetstiltakKontaktperson
    metadata: Metadata!
    tiltakstype: String!
}

type SikkerhetstiltakKontaktperson {
    enhet: String!
    personident: String!
}

type Sivilstand {
    bekreftelsesdato: String
    folkeregistermetadata: Folkeregistermetadata
    gyldigFraOgMed: Date
    kommune: String
    metadata: Metadata!
    myndighet: String
    relatertVedSivilstand: String
    sted: String
    type: Sivilstandstype!
    utland: String
}

type Statsborgerskap {
    folkeregistermetadata: Folkeregistermetadata
    gyldigFraOgMed: Date
    gyldigTilOgMed: Date
    land: String!
    metadata: Metadata!
}

type Telefonnummer {
    landskode: String!
    metadata: Metadata!
    nummer: String!
    prioritet: Int!
}

type TilrettelagtKommunikasjon {
    metadata: Metadata!
    talespraaktolk: Tolk
    tegnspraaktolk: Tolk
}

type Tolk {
    spraak: String
}

type UkjentBosted {
    bostedskommune: String
}

type UtenlandskAdresse {
    adressenavnNummer: String
    bySted: String
    bygningEtasjeLeilighet: String
    landkode: String!
    postboksNummerNavn: String
    postkode: String
    regionDistriktOmraade: String
}

type UtenlandskAdresseIFrittFormat {
    adresselinje1: String
    adresselinje2: String
    adresselinje3: String
    byEllerStedsnavn: String
    landkode: String!
    postkode: String
}

type UtenlandskIdentifikasjonsnummer {
    folkeregistermetadata: Folkeregistermetadata
    identifikasjonsnummer: String!
    metadata: Metadata!
    opphoert: Boolean!
    utstederland: String!
}

type UtflyttingFraNorge {
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
    tilflyttingsland: String
    tilflyttingsstedIUtlandet: String
    utflyttingsdato: Date
}

type Vegadresse {
    adressenavn: String
    bruksenhetsnummer: String
    bydelsnummer: String
    husbokstav: String
    husnummer: String
    kommunenummer: String
    koordinater: Koordinater
    matrikkelId: Long
    postnummer: String
    tilleggsnavn: String
}

type VergeEllerFullmektig {
    motpartsPersonident: String
    navn: Personnavn
    omfang: String
    omfangetErInnenPersonligOmraade: Boolean!
}

type VergemaalEllerFremtidsfullmakt {
    embete: String
    folkeregistermetadata: Folkeregistermetadata
    metadata: Metadata!
    type: String
    vergeEllerFullmektig: VergeEllerFullmektig!
}

enum AdressebeskyttelseGradering {
    FORTROLIG
    STRENGT_FORTROLIG
    STRENGT_FORTROLIG_UTLAND
    UGRADERT
}

enum Direction {
    ASC
    DESC
}

enum Endringstype {
    KORRIGER
    OPPHOER
    OPPRETT
}

enum Familierelasjonsrolle {
    BARN
    FAR
    MEDMOR
    MOR
}

enum FullmaktsRolle {
    FULLMAKTSGIVER
    FULLMEKTIG
}

enum GtType {
    BYDEL
    KOMMUNE
    UDEFINERT
    UTLAND
}

enum IdentGruppe {
    AKTORID
    FOLKEREGISTERIDENT
    NPID
}

enum Identitetsgrunnlagsstatus {
    IKKE_KONTROLLERT
    INGEN_STATUS
    KONTROLLERT
}

enum KjoennType {
    KVINNE
    MANN
    UKJENT
}

enum KontaktadresseType {
    Innland
    Utland
}

enum KontaktinformasjonForDoedsboSkifteform {
    ANNET
    OFFENTLIG
}

enum Oppholdstillatelse {
    MIDLERTIDIG
    OPPLYSNING_MANGLER
    PERMANENT
}

enum Sivilstandstype {
    ENKE_ELLER_ENKEMANN
    GIFT
    GJENLEVENDE_PARTNER
    REGISTRERT_PARTNER
    SEPARERT
    SEPARERT_PARTNER
    SKILT
    SKILT_PARTNER
    UGIFT
    UOPPGITT
}

input Criterion {
    " Feltnavn ikludert sti til Ã¸nsket felt (Eksempel: person.navn.fornavn)"
    fieldName: String!
    """

    SÃ¸k i historiske data
    true = sÃ¸ker kun i historiske data.
    false = sÃ¸ker kun i gjeldende data.
    null = sÃ¸ke i bÃ¥de historiske og gjeldende data.
    """
    searchHistorical: Boolean
    searchRule: SearchRule!
}

input Paging {
    " Hvilken side i resultatsettet man Ã¸nsker vist."
    pageNumber: Int = 1
    " antall treff per side (maks 100)"
    resultsPerPage: Int = 10
    """

    Liste over felter man Ã¸nsker resultatene sortert etter
    Standard er "score". Score er poengsummen Elasticsearch tildeler hvert resultat.
    """
    sortBy: [SearchSorting]
}

input SearchRule {
    " Brukes til sÃ¸ke etter datoer som kommer etter opgitt dato."
    after: String
    " Brukes til sÃ¸ke etter datoer som kommer fÃ¸r opgitt dato."
    before: String
    " Boost brukes til Ã¥ gi ett sÃ¸kekriterie hÃ¸yere eller lavere vektlegging en de andre sÃ¸ke kriteriene."
    boost: Float
    " [Flag] Kan brukes til Ã¥ overstyre standard oppfÃ¸rsellen for sÃ¸k i felter (standard er case insensitive)"
    caseSensitive: Boolean
    " Gir treff nÃ¥r opgitt felt inneholder en eller flere ord fra input verdien."
    contains: String
    " [Flag] Brukes til Ã¥ deaktivere fonetisk sÃ¸k feltene som har dette som standard (Navn)"
    disablePhonetic: Boolean
    " Begrenser treff til kun de hvor felt har input verdi"
    equals: String
    " Sjekker om feltet finnes / at det ikke har en null verdi."
    exists: String
    """

    SÃ¸k fra og med (se fromExcluding for bare fra men ikke med)
    kan benyttes pÃ¥ tall og dato
    """
    from: String
    """

    SÃ¸k fra men ikke med oppgitt verdi
    kan benyttes pÃ¥ tall og dato
    """
    fromExcluding: String
    " SÃ¸k som gir treff ogsÃ¥ for smÃ¥ variasjoner i skrivemÃ¥te"
    fuzzy: String
    " Brukes til Ã¥ sÃ¸ke i tall og finner verdier som er stÃ¸rren en input verdi."
    greaterThan: String
    " Brukes til Ã¥ sÃ¸ke i tall og finner verdier som er mindre en input verdi."
    lessThan: String
    " Filtrerer bort treff hvor felt inneholder input verdi"
    notEquals: String
    " Regex sÃ¸k for spesielle situasjoner (Dette er en treg opprasjon og bÃ¸r ikke brukes)"
    regex: String
    " Gir treff nÃ¥r opgitt feltstarter med opgitt verdi."
    startsWith: String
    """

    SÃ¸k til og med (se toExcluding for bare til men ikke med)
    kan benyttes pÃ¥ tall og dato
    """
    to: String
    """

    SÃ¸k til men ikke med oppgitt verdi
    kan benyttes pÃ¥ tall og dato
    """
    toExcluding: String
    " Bruk \"?\" som wildcard for enkelt tegn, og \"*\" som wildcard for 0 eller flere tegn."
    wildcard: String
}

input SearchSorting {
    direction: Direction!
    " Feltnavn ikludert sti til Ã¸nsket felt (eksepmel: person.navn.fornavn)"
    fieldName: String!
}


"Format: YYYY-MM-DD (ISO-8601), example: 2017-11-24"
scalar Date

"Format: YYYY-MM-DDTHH:mm:SS (ISO-8601), example: 2011-12-03T10:15:30"
scalar DateTime

"Long type"
scalar Long